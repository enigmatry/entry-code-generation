// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { LookupApiMockClient } from 'src/app/api/api-reference';

@Injectable({
  providedIn: 'root'
})
export class FormLookupService {
    private _getStatusFixedValues = [
		{ value: 0, displayName: "First" },
		{ value: 1, displayName: "Second" },
		{ value: 2, displayName: "Third" },
	];
	private _getStatus = new BehaviorSubject<any[]>(this._getStatusFixedValues);
	private _getCategoryLookups = new Subject<any[]>();
	private _getTypeLookups = new Subject<any[]>();
	private _getSubTypeLookups = new Subject<any[]>();
	getStatus$ = this._getStatus.asObservable();
	getCategoryLookups$ = this._getCategoryLookups.asObservable();
	getTypeLookups$ = this._getTypeLookups.asObservable();
	getSubTypeLookups$ = this._getSubTypeLookups.asObservable();

    constructor(private lookupApiMockClient: LookupApiMockClient) { }

    initLookups(response: any) {
        this.getCategoryLookups();
        this.getTypeLookups(response.categoryId);
        this.getSubTypeLookups(response.typeId);
    }

    displayOption(option): string { return option ? option.displayName : ''; }

	getCategoryLookups() {
		this.lookupApiMockClient.getCategoryLookups()
            .subscribe(x => this._getCategoryLookups.next(x.items));
	}

	getTypeLookups(categoryId) {
		this.lookupApiMockClient.getTypeLookups(categoryId)
            .subscribe(x => this._getTypeLookups.next(x.items));
	}

	getSubTypeLookups(typeId) {
		this.lookupApiMockClient.getSubTypeLookups(typeId)
            .subscribe(x => this._getSubTypeLookups.next(x.items));
	}

    getStatus(keyword: string) {
		this._getStatus.next(this._getStatusFixedValues
			.filter(x => x.displayName.toLowerCase().includes(keyword.toLowerCase())));
	}

	getStatusDisplayOption(value) {
		return value !== undefined ? this._getStatusFixedValues
			.find(x => x.value === value)?.displayName : '';
	}

}