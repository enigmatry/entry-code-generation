@using Enigmatry.Entry.CodeGeneration
@using Enigmatry.Entry.CodeGeneration.Templates.HtmlHelperExtensions.Angular
@using Enigmatry.Entry.CodeGeneration.Angular
@using Enigmatry.Entry.CodeGeneration.Configuration.List.Model
@using Enigmatry.Entry.CodeGeneration.Templates.HtmlHelperExtensions.TypeScript
@model Enigmatry.Entry.CodeGeneration.Configuration.List.ListComponentModel;
@inject CodeGeneratorOptions Options;
import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@@angular/core';
import { PagedData, SortDirection, CellTemplate, ContextMenuItem, RowContextMenuFormatter, RowClassFormatter, RowSelectionFormatter, ColumnDef, PageEvent, SortEvent } from '@@enigmatry/entry-table';

import { @(Model.ComponentInfo.ModelType) } from '@Options.ApiClientTsImportPath';

@@Component({
  selector: '@Model.AngularComponentSelector(Options.GeneratedComponentPrefix)',
  templateUrl: './@(Model.AngularComponentFileName()).html',
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class @Model.AngularComponentName() implements OnInit {

  @@Input() data: PagedData@(Html.Raw($"<{Model.ComponentInfo.ModelType}>")) | null;
  @@Input() loading: boolean;

  @@Input() showPaginator = @Model.Pagination.ShowPaginator.ToString().ToLower();
  @@Input() showFirstLastButtons = @Model.Pagination.ShowFirstLastPageButtons.ToString().ToLower();
  @@Input() pageSizeOptions = @Html.JsArray(Model.Pagination.PageSizeOptions);
  @@Input() hidePageSize = !@Model.Pagination.ShowPageSize.ToString().ToLower();

  @@Input() defaultSort: { sortBy?: string | undefined, sortDirection?: SortDirection } = { };

  @@Input() rowSelectable = @Model.Row.IsSelectable.ToString().ToLower();
  @@Input() multiSelectable = @((Model.Row.Selection == RowSelectionType.Multiple).ToString().ToLower());
  @@Input() showSelectAllCheckbox = @Model.Row.ShowSelectAllOption.ToString().ToLower();
  @@Input() rowSelected: @(Html.Raw(Model.ComponentInfo.ModelType))[] = [];

  @@Input() headerTemplate: TemplateRef@(Html.Raw("<any>")) | CellTemplate;
  @@Input() cellTemplate: TemplateRef@(Html.Raw("<any>")) | CellTemplate;
      
  @@Input() noResultText: string;
  @@Input() noResultTemplate: TemplateRef@(Html.Raw("<any>")) | null;

  @@Input() showContextMenu = @Model.Row.ShowContextMenu.ToString().ToLower();
  @@Input() contextMenuItems: ContextMenuItem[] = @Html.CreateContextMenuItems(Model.Row.ContextMenuItems, Options.EnableI18N);
  @@Input() rowContextMenuFormatter: RowContextMenuFormatter;
  
  @@Input() rowClassFormatter: RowClassFormatter;
  @@Input() rowSelectionFormatter: RowSelectionFormatter = {};

  @@Input() columns: ColumnDef[] = [];

  @@Output() pageChange = new EventEmitter@(Html.Raw("<PageEvent>"))();
  @@Output() sortChange = new EventEmitter@(Html.Raw("<SortEvent>"))();
  @@Output() selectionChange = new EventEmitter@(Html.Raw($"<{Model.ComponentInfo.ModelType}[]>"))();
  @@Output() contextMenuItemSelected = new EventEmitter<@(Html.Raw($"{{ itemId: string; rowData: {Model.ComponentInfo.ModelType} }}"))>();
  @@Output() rowClick = new EventEmitter@(Html.Raw($"<{Model.ComponentInfo.ModelType}>"))();

  @if (Model.HasColumns)
  {
  @Html.AllCustomCellTemplateViewChildRefs(Model.Columns)
  }

  constructor() { }

  ngOnInit(): void {
    this.columns = @Html.CreateColumnDefs(Model.Columns, Options.EnableI18N);
}
