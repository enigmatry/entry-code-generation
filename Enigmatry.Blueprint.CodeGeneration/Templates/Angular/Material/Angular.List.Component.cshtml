@using Enigmatry.Blueprint.CodeGeneration.Angular
@using Enigmatry.Blueprint.CodeGeneration.Templates.HtmlHelperExtensions
@using Enigmatry.Blueprint.CodeGeneration.Templates.HtmlHelperExtensions.TypeScript
@model Enigmatry.Blueprint.CodeGeneration.Configuration.List.ListComponentModel;
@Html.Disclaimer()
import { Component, OnInit } from '@@angular/core';
import { ActivatedRoute, Router } from '@@angular/router';
import { Observable } from 'rxjs';
import { mergeMap, tap } from 'rxjs/operators';

import { @(Model.ComponentInfo.ModelTypeName), @(Model.AngularComponentApiClient()) } from 'src/app/api/api-reference';

import { PagedResponse, PagedQueryParams } from 'src/app/shared/pagination/paged-data.model';
import { MatPagedTableComponent } from 'src/app/shared/pagination/mat-paged-table.component';

@@Component({
    templateUrl: './@(Model.AngularComponentFileName()).html',
    styleUrls: ['./@(Model.AngularComponentFileName()).scss']
})
@Html.Raw($"export class {Model.AngularComponentName()} extends MatPagedTableComponent<{Model.ComponentInfo.ModelTypeName}> implements OnInit {{")

  displayedColumns = @Html.StringArrayFor(Model.VisibleColumns, column => column.Property);

  constructor(private client: @(Model.AngularComponentApiClient()), router: Router, activatedRoute: ActivatedRoute) {
    super(router, activatedRoute);
}

ngOnInit() {
    this.activatedRoute.queryParams
      .pipe(
        tap(queryParams => this.queryParams.update(queryParams)),
        mergeMap(() => this.getPage(this.queryParams))
      )
      .subscribe(response => {
        this.dataSource.pagedResponse = response;
      });
  }

@Html.Raw($"getPage(query: PagedQueryParams): Observable<PagedResponse<{Model.ComponentInfo.ModelTypeName}>> {{")
    return this.client.search(query.keyword, query.pageNumber, query.pageSize, query.sortBy, query.sortDirection);
   }
}
