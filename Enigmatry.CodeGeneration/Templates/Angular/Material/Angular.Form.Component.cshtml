@using Humanizer;
@using Enigmatry.CodeGeneration
@using Enigmatry.CodeGeneration.Angular
@using Enigmatry.CodeGeneration.Templates.HtmlHelperExtensions.Angular
@model Enigmatry.CodeGeneration.Configuration.Form.FormComponentModel;
@inject CodeGeneratorOptions _options;
import { Component, EventEmitter, Input, OnInit, Output } from '@@angular/core';
import { FormGroup } from '@@angular/forms';
import { FormlyFieldConfig } from '@@ngx-formly/core';
import { I@(Model.ComponentInfo.ModelType) } from '@_options.ApiClientTsImportPath';
@if (Model.LookupService != null)
{
@:import { map } from 'rxjs/operators';
@:import { @(Model.ComponentInfo.Name)LookupService } from '../services/@(Model.AngularComponentDirectory())-generated-lookup.service';
}
@if (Model.HasCustomValidators)
{
@Html.ImportValidators(Model.FormControls, _options.ValidatorsPath)
}

@@Component({
  selector: '@Model.AngularComponentSelector(_options.GeneratedComponentPrefix)',
  templateUrl: './@(Model.AngularComponentFileName()).html',
  styleUrls: ['./@(Model.AngularComponentFileName()).scss']
})
export class @Model.AngularComponentName() implements OnInit {

  @@Input() model: I@(Model.ComponentInfo.ModelType) = {};

  @@Output() save = new EventEmitter@(Html.Raw($"<I{Model.ComponentInfo.ModelType}>"))();
  @@Output() cancel = new EventEmitter@(Html.Raw("<void>"))();

  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];

  constructor(@if (Model.LookupService != null) { <text>private lookupService: @(Model.ComponentInfo.Name)LookupService</text> }) {
    this.fields = [@foreach (var control in Model.VisibleFormControls)
   {
     @:{
        @:key: '@control.PropertyName',
        @:type: '@control.GetFormlyFieldType()',
        @:templateOptions: {
          @:label: @Html.Localize(control.LabelTranslationId, control.Label, _options.EnableI18N),
          @:placeholder: @Html.Localize(control.PlaceholderTranslationId, control.Placeholder, _options.EnableI18N),
          @:readonly: @control.IsReadonly.ToString().ToLower(),
          @:description: @Html.Localize(control.HintTranslationId, control.Hint, _options.EnableI18N),
          @if (Model.OptionsAvailable(control))
          {
          @:options: lookupService.get@(control.PropertyName.Pascalize())$.pipe(
            @:map((arr) =>
              @:arr.map(el => el = {value: el.value, label: el.displayName}))
            @:),
          }
          @:hidden: !@control.IsVisible.ToString().ToLower(),
          @if(control.BuiltInValidationRules.Any())
          {
          @Html.AddValidationFields(control)
          }
        @:},
        @if(control.BuiltInValidationRules.Any())
        {
        @:validation: {
          @:messages: {
            @Html.AddValidationMessages(control, _options.EnableI18N)
          @:}
        @:},
        }
        @if (control.CustomValidator != null)
        {
            @Html.AddValidators(control.PropertyName, control.CustomValidator, _options.EnableI18N)
        }
        @if (control.AsyncCustomValidator != null)
        {
            @Html.AddAsuncValidators(control.PropertyName, control.AsyncCustomValidator, _options.EnableI18N)
        }
     @:},
   }];
 }

  ngOnInit(): void {
  }

  onSubmit() {
    if (this.form.valid) {
      this.save.emit(this.model);
    }
  }
}
