@using Enigmatry.CodeGeneration
@using Enigmatry.CodeGeneration.Angular
@using Enigmatry.CodeGeneration.Templates.HtmlHelperExtensions.Angular
@using Enigmatry.CodeGeneration.Templates.HtmlHelperExtensions.TypeScript
@model Enigmatry.CodeGeneration.Configuration.List.ListComponentModel;
@inject CodeGeneratorOptions _options;
/* eslint-disable @@typescript-eslint/member-ordering */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@@angular/core';
import { ColumnDef } from 'src/@@enigmatry/enigmatry-grid';
import { PagedData, PageEvent, SortEvent } from 'src/@@enigmatry/pagination';

import { @(Model.ComponentInfo.ModelType) } from '@_options.ApiClientTsImportPath';

@@Component({
  selector: '@Model.AngularComponentSelector(_options.ComponentPrefix)',
  templateUrl: './@(Model.AngularComponentFileName()).html',
  styleUrls: ['./@(Model.AngularComponentFileName()).scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class @Model.AngularComponentName() {

  @@Input() data: PagedData@(Html.Raw($"<{Model.ComponentInfo.ModelType}>")) | null;
  @@Input() loading: boolean;

  @@Input() showPaginator = @Model.ShowPaginator.ToString().ToLower();
  @@Input() showFirstLastButtons = @Model.ShowFirstLastPageButtons.ToString().ToLower();
  @@Input() pageSizeOptions = @Html.JsArray(Model.PageSizeOptions);
  @@Input() hidePageSize = @Model.HidePageSize.ToString().ToLower();

  @@Input() rowSelectable = @Model.IsRowSelectable.ToString().ToLower();
  @@Input() multiSelectable = @Model.EnableMultiSelection.ToString().ToLower();

  @@Input() columns: ColumnDef[] = @Html.CreateColumnDefs(Model.Columns);

  @@Output() pageChange = new EventEmitter@(Html.Raw("<PageEvent>"))();
  @@Output() sortChange = new EventEmitter@(Html.Raw("<SortEvent>"))();
  @@Output() selectionChange = new EventEmitter@(Html.Raw($"<{Model.ComponentInfo.ModelType}[]>"))();

  constructor() {}
}
