@using Enigmatry.CodeGeneration
@using Enigmatry.CodeGeneration.Angular
@using Enigmatry.CodeGeneration.Configuration.List.Model
@using Enigmatry.CodeGeneration.Templates.HtmlHelperExtensions.Angular
@using Enigmatry.CodeGeneration.Templates.HtmlHelperExtensions.TypeScript
@model Enigmatry.CodeGeneration.Configuration.List.ListComponentModel;
@inject CodeGeneratorOptions _options;
import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild } from '@@angular/core';
import { CellTemplate, ColumnDef, ContextMenuItem } from '@@enigmatry/angular-building-blocks/enigmatry-grid';
import { PagedData, PageEvent, SortDirection, SortEvent } from '@@enigmatry/angular-building-blocks/pagination';

import { @(Model.ComponentInfo.ModelType) } from '@_options.ApiClientTsImportPath';

@@Component({
  selector: '@Model.AngularComponentSelector(_options.GeneratedComponentPrefix)',
  templateUrl: './@(Model.AngularComponentFileName()).html',
  styleUrls: ['./@(Model.AngularComponentFileName()).scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class @Model.AngularComponentName() implements OnInit {

  @@Input() data: PagedData@(Html.Raw($"<{Model.ComponentInfo.ModelType}>")) | null;
  @@Input() loading: boolean;

  @@Input() showPaginator = @Model.Pagination.ShowPaginator.ToString().ToLower();
  @@Input() showFirstLastButtons = @Model.Pagination.ShowFirstLastPageButtons.ToString().ToLower();
  @@Input() pageSizeOptions = @Html.JsArray(Model.Pagination.PageSizeOptions);
  @@Input() hidePageSize = !@Model.Pagination.ShowPageSize.ToString().ToLower();

  @@Input() defaultSort: { sortBy?: string | undefined; sortDirection?: SortDirection } = { };

  @@Input() rowSelectable = @Model.Row.IsSelectable.ToString().ToLower();
  @@Input() multiSelectable = @((Model.Row.Selection == RowSelectionType.Multiple).ToString().ToLower());

  @@Input() headerTemplate: TemplateRef@(Html.Raw("<any>")) | CellTemplate;
  @@Input() cellTemplate: TemplateRef@(Html.Raw("<any>")) | CellTemplate;

  @@Input() showContextMenu = @Model.Row.ShowContextMenu.ToString().ToLower();
  @@Input() contextMenuItems: ContextMenuItem[] = [];

  @@Input() columns: ColumnDef[] = [];

  @@Output() pageChange = new EventEmitter@(Html.Raw("<PageEvent>"))();
  @@Output() sortChange = new EventEmitter@(Html.Raw("<SortEvent>"))();
  @@Output() selectionChange = new EventEmitter@(Html.Raw($"<{Model.ComponentInfo.ModelType}[]>"))();
  @@Output() contextMenuItemSelected = new EventEmitter<@(Html.Raw($"{{ itemId: string; rowData: {Model.ComponentInfo.ModelType} }}"))>();
  @@Output() rowClick = new EventEmitter@(Html.Raw($"<{Model.ComponentInfo.ModelType}>"))();

  @if (Model.HasColumns)
  {
  @Html.AllCustomCellTemplateViewChildRefs(Model.Columns)
  }

  constructor() { }

  ngOnInit(): void {
    this.columns = @Html.CreateColumnDefs(Model.Columns, _options.EnableI18N);
    this.contextMenuItems = @Html.CreateContextMenuItems(Model.Row.ContextMenuItems, _options.EnableI18N);
  }
}
