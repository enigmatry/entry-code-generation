@model Enigmatry.CodeGeneration.Configuration.FeatureModule;
@using Enigmatry.CodeGeneration.Angular
@using Enigmatry.CodeGeneration.Templates.HtmlHelperExtensions
@using Enigmatry.CodeGeneration.Templates.HtmlHelperExtensions.TypeScript
import { NgModule } from '@@angular/core';
import { CommonModule } from '@@angular/common';
import { SharedModule } from 'src/app/shared/shared.module';
import { EnigmatryGridModule } from 'src/@@enigmatry/enigmatry-grid';
@if (Model.HasFormComponents)
{
@:import { FormlyModule } from '@@ngx-formly/core';
@:import { FormlyMaterialModule } from '@@ngx-formly/material';
@:import { MatNativeDateModule } from '@@angular/material/core';
@:import { MatAutocompleteModule } from '@@angular/material/autocomplete';
@:import { FormlyMatDatepickerModule } from '@@ngx-formly/material/datepicker';
}
@Html.ImportModules(Model.Imports)
@Html.ImportComponentsFrom(Model)

@@NgModule({
    declarations: @Html.JsArray(Model.Components, component => component.AngularComponentName()),
    imports: [
        CommonModule,
        SharedModule,
        EnigmatryGridModule,
        @if (Model.HasFormComponents)
        {
        @:MatAutocompleteModule,
        @:MatNativeDateModule,
        @:FormlyModule.forChild(),
        @:FormlyMaterialModule,
        @:FormlyMatDatepickerModule,
        }
        @String.Join(',', Model.Imports.Select(m => m.Name))
    ],
    exports: @Html.JsArray(Model.Components, component => component.AngularComponentName())
})
export class @(Model.Name)GeneratedModule { }
