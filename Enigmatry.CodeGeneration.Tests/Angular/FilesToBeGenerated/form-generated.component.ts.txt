// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
/* eslint-disable */
import { Component, EventEmitter, Inject, Input, LOCALE_ID, OnInit, OnDestroy, Optional, Output, TemplateRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { IFormMock } from 'src/app/api/api-reference';
import { IFieldExpressionDictionary, IFieldPropertyExpressionDictionary, SelectConfiguration, ENIGMATRY_FIELD_TYPE_RESOLVER, FieldTypeResolver, sortOptions } from '@enigmatry/angular-building-blocks/form';
import { BehaviorSubject, of, Subject, Subscription } from 'rxjs';
import { map, throttleTime } from 'rxjs/operators';


@Component({
  selector: 'app-g-form',
  templateUrl: './form-generated.component.html',
  styleUrls: ['./form-generated.component.scss']
})
export class FormGeneratedComponent implements OnInit, OnDestroy {

  @Input() model: IFormMock = {} as IFormMock;
  @Input() set isReadonly(value: boolean) {
    this._isReadonly = value;
    this.fields = this.initializeFields();
  }
  get isReadonly() {
    return this._isReadonly;
  }

  @Input() saveButtonText: string = 'Save';
  @Input() cancelButtonText: string = 'Cancel';
  @Input() saveButtonDisabled: boolean = false;
  @Input() formButtonsTemplate: TemplateRef<any> | null | undefined;

  @Input() fieldsHideExpressions: IFieldExpressionDictionary<IFormMock> | undefined = undefined;
  @Input() fieldsDisableExpressions: IFieldExpressionDictionary<IFormMock> | undefined = undefined;
  @Input() fieldsRequiredExpressions: IFieldExpressionDictionary<IFormMock> | undefined = undefined;
  @Input() fieldsPropertyExpressions: IFieldPropertyExpressionDictionary<IFormMock> | undefined = undefined;

  @Output() save = new EventEmitter<IFormMock>();
  @Output() cancel = new EventEmitter<void>();
  @Output() buttonClick = new EventEmitter<string>();

                @Input() formStatusOptions: any[] = [{ value: null, displayName: $localize `:@@empty-option.none:None` }, { value: 0, displayName: $localize `:@@enum.enum-mock.first:First` }, { value: 1, displayName: $localize `:@@enum.enum-mock.second:Second` }, { value: 2, displayName: $localize `:@@enum.enum-mock.third:Third` }];
                @Input() formStatusOptionsConfiguration: SelectConfiguration = { valueProperty: 'value', labelProperty: 'displayName', sortProperty: 'displayName' };
                @Input() mockRadioOptions: any[] = [{ value: 0, displayName: $localize `:@@enum.enum-mock.first:First` }, { value: 1, displayName: $localize `:@@enum.enum-mock.second:Second` }, { value: 2, displayName: $localize `:@@enum.enum-mock.third:Third` }];
                @Input() mockRadioOptionsConfiguration: SelectConfiguration = { valueProperty: 'value', labelProperty: 'displayName', sortProperty: '' };
            private categoryIdOptions$ = new BehaviorSubject<any[]>([]);
                @Input()
                get categoryIdOptions(): any[] { return this.categoryIdOptions$.value; }
                set categoryIdOptions(value: any[]) { this.categoryIdOptions$.next(value); }
                @Input() categoryIdOptionsConfiguration: SelectConfiguration = { valueProperty: 'id', labelProperty: 'categoryName', sortProperty: 'categoryName' };
            private typesOptions$ = new BehaviorSubject<any[]>([]);
                @Input()
                get typesOptions(): any[] { return this.typesOptions$.value; }
                set typesOptions(value: any[]) { this.typesOptions$.next(value); }
                @Input() typesOptionsConfiguration: SelectConfiguration = {};

  _isReadonly: boolean;
  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];
  private _submitClicks = new Subject<void>();
  private _submitClicksSubscription: Subscription;

  constructor(
    @Inject(LOCALE_ID) private _localeId: string,
    @Optional() @Inject(ENIGMATRY_FIELD_TYPE_RESOLVER) private _fieldTypeResolver: FieldTypeResolver) { }

  ngOnInit(): void {
    this.fields = this.initializeFields();
    this._submitClicksSubscription = this._submitClicks
        .pipe(throttleTime(500))
        .subscribe(() => this.save.emit(this.model));
  }

  ngOnDestroy(): void {
      this._submitClicksSubscription.unsubscribe();
  }

  onSubmit() {
    if (this.form.valid) {
      this._submitClicks.next();
    }
  }

  resolveFieldType = (type: string, isControlReadonly: boolean): string =>
    this._fieldTypeResolver ? this._fieldTypeResolver(type, this.isReadonly || isControlReadonly) : type;

  initializeFields(): FormlyFieldConfig[] {
    return [
            { key: 'id' },
        {
        key: 'resetFormBtn',
        type: this.resolveFieldType('button', false),
        className: 'primary-button',
        hideExpression: this.fieldsHideExpressions?.resetFormBtn ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.resetFormBtn ? this.fieldsDisableExpressions.resetFormBtn(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.resetFormBtn ? this.fieldsRequiredExpressions.resetFormBtn(model) : false),
        'model.resetFormBtn': (model) => (this.fieldsPropertyExpressions?.resetFormBtn ? this.fieldsPropertyExpressions.resetFormBtn(model) : model.resetFormBtn),
        },
        templateOptions: {
        label: '',
        placeholder: '',
        description: '',
            text: $localize `:@@test.form.reset-form-btn.text:Reset`,
            onClick: ($event: any) => this.buttonClick.emit('resetFormBtn'),
        hidden: !true,
        },
        },
        {
        type: this.resolveFieldType('group-type', false),
        fieldGroupClassName: '',
                wrappers: ['group-wrapper'],
        templateOptions: {
        label: $localize `:@@test.form.group-name.label:Group name`,
        placeholder: $localize `:@@test.form.group-name.placeholder:Group name`,
        disabled: this.isReadonly || false,
        description: ''
        },
        fieldGroup:[
        {
        key: 'name',
        type: this.resolveFieldType('input', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.name ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.name ? this.fieldsDisableExpressions.name(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.name ? this.fieldsRequiredExpressions.name(model) : true),
        'model.name': (model) => (this.fieldsPropertyExpressions?.name ? this.fieldsPropertyExpressions.name(model) : model.name),
        },
                wrappers: ['form-field', 'tooltip'],
        templateOptions: {
        label: $localize `:@@test.form.name.label:Name`,
        placeholder: $localize `:@@test.form.name.placeholder:Some / Name`,
        description: '',
appearance: 'outline',
floatLabel: 'always',
        hidden: !true,
            tooltipText: $localize `:@@test.form.name.tooltip:Tooltip text`,
            required: true,
maxLength: 50,
pattern: /[A-Z]/,

            typeFormatDef: undefined
        },
            validation: {
            messages: {
required: (err, field) => $localize `:@@CUSTOM_VALIDATION_MESSAGE_TRANSLATION_ID:CUSTOM_VALIDATION_MESSAGE`,
maxlength: (err, field) => $localize `:@@CUSTOM_VALIDATION_MESSAGE_TRANSLATION_ID:CUSTOM_VALIDATION_MESSAGE`
            }
            },
asyncValidators: { validation: [ 'isEnsured' ] },
modelOptions: { updateOn: 'blur' },
        },
        {
        key: 'description',
        type: this.resolveFieldType('textarea', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.description ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.description ? this.fieldsDisableExpressions.description(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.description ? this.fieldsRequiredExpressions.description(model) : false),
        'model.description': (model) => (this.fieldsPropertyExpressions?.description ? this.fieldsPropertyExpressions.description(model) : model.description),
        },
        templateOptions: {
        label: $localize `:@@test.form.description.label:Some Description`,
        placeholder: $localize `:@@test.form.description.placeholder:Some Description`,
        description: '',
            rows: 2,
            cols: 0,
            autosize: false,
            autosizeMinRows: 0,
            autosizeMaxRows: 0,
        hidden: !true,
            typeFormatDef: undefined
        },
asyncValidators: { validation: [ 'validDescription' ] },
modelOptions: { updateOn: 'blur' },
        },
        {
        key: 'date',
        type: this.resolveFieldType('datepicker', true),
        className: '',
        hideExpression: this.fieldsHideExpressions?.date ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.date ? this.fieldsDisableExpressions.date(model) : true)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.date ? this.fieldsRequiredExpressions.date(model) : false),
        'model.date': (model) => (this.fieldsPropertyExpressions?.date ? this.fieldsPropertyExpressions.date(model) : model.date),
        },
                wrappers: ['tooltip', 'form-field'],
        templateOptions: {
        label: $localize `:@@test.form.date.label:Date`,
        placeholder: $localize `:@@test.form.date.placeholder:Date`,
        description: '',
        hidden: !true,
            typeFormatDef: { name: 'date' }
        },
modelOptions: { updateOn: 'blur' },
        },
        {
        key: 'money',
        type: this.resolveFieldType('input', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.money ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.money ? this.fieldsDisableExpressions.money(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.money ? this.fieldsRequiredExpressions.money(model) : false),
        'model.money': (model) => (this.fieldsPropertyExpressions?.money ? this.fieldsPropertyExpressions.money(model) : model.money),
        },
        templateOptions: {
        label: $localize `:@@test.form.money.label:Money`,
        placeholder: $localize `:@@test.form.money.placeholder:Money`,
        description: '',
        hidden: !true,
            type: 'number',
max: 999.99 - 0.1,

            typeFormatDef: { name: 'number' }
        },
        },
        {
        key: 'amount',
        type: this.resolveFieldType('input', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.amount ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.amount ? this.fieldsDisableExpressions.amount(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.amount ? this.fieldsRequiredExpressions.amount(model) : true),
        'model.amount': (model) => (this.fieldsPropertyExpressions?.amount ? this.fieldsPropertyExpressions.amount(model) : model.amount),
        },
        templateOptions: {
        label: $localize `:@@test.form.amount.label:Amount`,
        placeholder: $localize `:@@test.form.amount.placeholder:Amount`,
        description: '',
        hidden: !true,
            required: true,
type: 'number',
min: 0 + 1,
max: 100,

            typeFormatDef: undefined
        },
            validation: {
            messages: {
min: (err, field) => $localize `:@@test.form.amount.min:CUSTOM_VALIDATION_MESSAGE`,
max: (err, field) => $localize `:@@test.form.amount.max:CUSTOM_VALIDATION_MESSAGE`
            }
            },
        },
        {
        key: 'formStatus',
        type: this.resolveFieldType('select', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.formStatus ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.formStatus ? this.fieldsDisableExpressions.formStatus(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.formStatus ? this.fieldsRequiredExpressions.formStatus(model) : false),
        'model.formStatus': (model) => (this.fieldsPropertyExpressions?.formStatus ? this.fieldsPropertyExpressions.formStatus(model) : model.formStatus),
        },
        templateOptions: {
        label: $localize `:@@test.form.form-status.label:Form status`,
        placeholder: $localize `:@@test.form.form-status.placeholder:Form status`,
        description: '',
            options: of(this.formStatusOptions).pipe(map(opts => sortOptions(opts, this.formStatusOptionsConfiguration.valueProperty, this.formStatusOptionsConfiguration.sortProperty, this._localeId))),
            valueProp: this.formStatusOptionsConfiguration.valueProperty,
            labelProp: this.formStatusOptionsConfiguration.labelProperty,
        hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'mockRadio',
        type: this.resolveFieldType('radio', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.mockRadio ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.mockRadio ? this.fieldsDisableExpressions.mockRadio(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.mockRadio ? this.fieldsRequiredExpressions.mockRadio(model) : false),
        'model.mockRadio': (model) => (this.fieldsPropertyExpressions?.mockRadio ? this.fieldsPropertyExpressions.mockRadio(model) : model.mockRadio),
        },
        templateOptions: {
        label: $localize `:@@test.form.mock-radio.label:Radio`,
        placeholder: $localize `:@@test.form.mock-radio.placeholder:Radio`,
        description: '',
            options: of(this.mockRadioOptions).pipe(map(opts => sortOptions(opts, this.mockRadioOptionsConfiguration.valueProperty, this.mockRadioOptionsConfiguration.sortProperty, this._localeId))),
            valueProp: this.mockRadioOptionsConfiguration.valueProperty,
            labelProp: this.mockRadioOptionsConfiguration.labelProperty,
        hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'categoryId',
        type: this.resolveFieldType('select', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.categoryId ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.categoryId ? this.fieldsDisableExpressions.categoryId(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.categoryId ? this.fieldsRequiredExpressions.categoryId(model) : false),
        'model.categoryId': (model) => (this.fieldsPropertyExpressions?.categoryId ? this.fieldsPropertyExpressions.categoryId(model) : model.categoryId),
        },
        templateOptions: {
        label: $localize `:@@test.form.category-id.label:Category`,
        placeholder: $localize `:@@test.form.category-id.placeholder:Category`,
        description: '',
            options: this.categoryIdOptions$.pipe(map(opts => sortOptions(opts, this.categoryIdOptionsConfiguration.valueProperty, this.categoryIdOptionsConfiguration.sortProperty, this._localeId))),
            valueProp: this.categoryIdOptionsConfiguration.valueProperty,
            labelProp: this.categoryIdOptionsConfiguration.labelProperty,
        hidden: !true,
metadata: { entityType: 'Category', filter: 'category_name' },
            typeFormatDef: undefined
        },
        },
        {
        key: 'types',
        type: this.resolveFieldType('select', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.types ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.types ? this.fieldsDisableExpressions.types(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.types ? this.fieldsRequiredExpressions.types(model) : false),
        'model.types': (model) => (this.fieldsPropertyExpressions?.types ? this.fieldsPropertyExpressions.types(model) : model.types),
        },
        templateOptions: {
        label: $localize `:@@test.form.types.label:Types`,
        placeholder: $localize `:@@test.form.types.placeholder:Types`,
        description: '',
            options: this.typesOptions$.pipe(map(opts => sortOptions(opts, this.typesOptionsConfiguration.valueProperty, this.typesOptionsConfiguration.sortProperty, this._localeId))),
            valueProp: this.typesOptionsConfiguration.valueProperty,
            labelProp: this.typesOptionsConfiguration.labelProperty,
            multiple: true,
            selectAllOption: $localize `:@@select-all-option.select-all:SelectAll`,
        hidden: !true,
            typeFormatDef: undefined
        },
        },        
        {
        key: 'password',
        type: this.resolveFieldType('input', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.password ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.password ? this.fieldsDisableExpressions.password(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.password ? this.fieldsRequiredExpressions.password(model) : false),
        'model.password': (model) => (this.fieldsPropertyExpressions?.password ? this.fieldsPropertyExpressions.password(model) : model.password),
        },
        templateOptions: {
        label: $localize `:@@test.form.password.label:Password`,
        placeholder: $localize `:@@test.form.password.placeholder:Password`,
        description: '',
        type: 'password',
        hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'addresses',
        type: this.resolveFieldType('array-field', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.addresses ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.addresses ? this.fieldsDisableExpressions.addresses(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.addresses ? this.fieldsRequiredExpressions.addresses(model) : false),
        'model.addresses': (model) => (this.fieldsPropertyExpressions?.addresses ? this.fieldsPropertyExpressions.addresses(model) : model.addresses),
        },
                wrappers: ['array-wrapper'],
        templateOptions: {
        label: $localize `:@@test.form.addresses.label:Addresses`,
        placeholder: $localize `:@@test.form.addresses.placeholder:Addresses`,
        description: '',
        hidden: !true,
            typeFormatDef: undefined
        },
            fieldArray:
        {
        type: this.resolveFieldType('', false),
        fieldGroupClassName: '',
                wrappers: ['group-wrapper'],
        templateOptions: {
        label: '',
        placeholder: '',
        disabled: this.isReadonly || false,
        description: ''
        },
        fieldGroup:[
            { key: 'id' },
        {
        key: 'city',
        type: this.resolveFieldType('input', false),
        className: '',
        defaultValue: 'Amsterdam',
        hideExpression: this.fieldsHideExpressions?.city ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.city ? this.fieldsDisableExpressions.city(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.city ? this.fieldsRequiredExpressions.city(model) : false),
        'model.city': (model) => (this.fieldsPropertyExpressions?.city ? this.fieldsPropertyExpressions.city(model) : model.city),
        },
        templateOptions: {
        label: $localize `:@@test.form.city.label:City`,
        placeholder: $localize `:@@test.form.city.placeholder:City`,
        description: '',
        hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'street',
        type: this.resolveFieldType('input', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.street ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.street ? this.fieldsDisableExpressions.street(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.street ? this.fieldsRequiredExpressions.street(model) : false),
        'model.street': (model) => (this.fieldsPropertyExpressions?.street ? this.fieldsPropertyExpressions.street(model) : model.street),
        },
        templateOptions: {
        label: $localize `:@@test.form.street.label:Street`,
        placeholder: $localize `:@@test.form.street.placeholder:Street`,
        description: '',
        hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'houseNumber',
        type: this.resolveFieldType('input', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.houseNumber ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.houseNumber ? this.fieldsDisableExpressions.houseNumber(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.houseNumber ? this.fieldsRequiredExpressions.houseNumber(model) : false),
        'model.houseNumber': (model) => (this.fieldsPropertyExpressions?.houseNumber ? this.fieldsPropertyExpressions.houseNumber(model) : model.houseNumber),
        },
        templateOptions: {
        label: $localize `:@@test.form.house-number.label:House number`,
        placeholder: $localize `:@@test.form.house-number.placeholder:House number`,
        description: '',
        hidden: !true,
            typeFormatDef: undefined
        },
        },
        {
        key: 'verified',
        type: this.resolveFieldType('checkbox', true),
        className: '',
        hideExpression: this.fieldsHideExpressions?.verified ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.verified ? this.fieldsDisableExpressions.verified(model) : true)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.verified ? this.fieldsRequiredExpressions.verified(model) : false),
        'model.verified': (model) => (this.fieldsPropertyExpressions?.verified ? this.fieldsPropertyExpressions.verified(model) : model.verified),
        },
        templateOptions: {
        label: $localize `:@@test.form.verified.label:Verified`,
        placeholder: $localize `:@@test.form.verified.placeholder:Verified`,
        description: '',
        hidden: !true,
            typeFormatDef: { name: 'boolean' }
        },
        },
        ]
        },
        },
        ]
        },
        {
        key: 'email1',
        type: this.resolveFieldType('input', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.email1 ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.email1 ? this.fieldsDisableExpressions.email1(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.email1 ? this.fieldsRequiredExpressions.email1(model) : false),
        'model.email1': (model) => (this.fieldsPropertyExpressions?.email1 ? this.fieldsPropertyExpressions.email1(model) : model.email1),
        },
        templateOptions: {
        label: $localize `:@@test.form.email1.label:Email 1`,
        placeholder: $localize `:@@test.form.email1.placeholder:Email 1`,
        description: '',
        hidden: !true,
            pattern: /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
maxLength: 50,

            typeFormatDef: undefined
        },
            validation: {
            messages: {
pattern: (err, field) => $localize `:@@test.form.email1.pattern:CUSTOM_VALIDATION_MESSAGE`
            }
            },
        },
        {
        key: 'email2',
        type: this.resolveFieldType('input', false),
        className: '',
        hideExpression: this.fieldsHideExpressions?.email2 ?? false,
        expressionProperties: {
        'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.email2 ? this.fieldsDisableExpressions.email2(model) : false)),
        'templateOptions.required': (model) => (this.fieldsRequiredExpressions?.email2 ? this.fieldsRequiredExpressions.email2(model) : false),
        'model.email2': (model) => (this.fieldsPropertyExpressions?.email2 ? this.fieldsPropertyExpressions.email2(model) : model.email2),
        },
        templateOptions: {
        label: $localize `:@@test.form.email2.label:Email 2`,
        placeholder: $localize `:@@test.form.email2.placeholder:Email 2`,
        description: '',
        hidden: !true,
            pattern: /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
maxLength: 50,

            typeFormatDef: undefined
        },
            validation: {
            messages: {
pattern: (err, field) => $localize `:@@validators.pattern.emailAddress:Invalid email address format`
            }
            },
        },
    ];
  }
}
