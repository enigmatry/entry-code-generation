// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { IFormMock } from 'src/app/api/api-reference';
import { map } from 'rxjs/operators';
import { FormLookupService } from '../services/form-generated-lookup.service';

@Component({
  selector: 'app-g-form',
  templateUrl: './form-generated.component.html',
  styleUrls: ['./form-generated.component.scss']
})
export class FormGeneratedComponent implements OnInit {

  @Input() model: IFormMock = {};

  @Output() save = new EventEmitter<IFormMock>();
  @Output() cancel = new EventEmitter<void>();

  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];

  constructor(private lookupService: FormLookupService) {
    this.fields = [     {
        key: 'name',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.name.label:Name`,
          placeholder: $localize `:@@test.form.name.placeholder:Name`,
          readonly: false,
          description: '',
          hidden: !true,
          required: true,
          maxLength: 50,
        },
        validation: {
            messages: {
                required: $localize `:@@CUSTOM_VALIDATION_MESSAGE_TRANSLATION_ID:Name is required`,
                maxLength: $localize `:@@CUSTOM_VALIDATION_MESSAGE_TRANSLATION_ID:CUSTOM_VALIDATION_MESSAGE`
            }
        },
      },
     {
        key: 'description',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.description.label:Description`,
          placeholder: $localize `:@@test.form.description.placeholder:Description`,
          readonly: false,
          description: '',
          hidden: !true,
        },
      },
     {
        key: 'date',
        type: 'datepicker',
        templateOptions: {
          label: $localize `:@@test.form.date.label:Date`,
          placeholder: $localize `:@@test.form.date.placeholder:Date`,
          readonly: false,
          description: '',
          hidden: !true,
        },
      },
     {
        key: 'money',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.money.label:Money`,
          placeholder: $localize `:@@test.form.money.placeholder:Money`,
          readonly: false,
          description: '',
          hidden: !true,
        },
      },
     {
        key: 'amount',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.amount.label:Amount`,
          placeholder: $localize `:@@test.form.amount.placeholder:Amount`,
          readonly: false,
          description: '',
          hidden: !true,
          type: 'number',
          required: true,
          min: 0,
          max: 100,
        },
        validation: {
            messages: {
                required: $localize `:@@test.form.amount.required:Amount is required`,
                min: $localize `:@@test.form.amount.min:CUSTOM_VALIDATION_MESSAGE`,
                max: $localize `:@@test.form.amount.max:CUSTOM_VALIDATION_MESSAGE`
            }
        },
      },
     {
        key: 'formStatus',
        type: 'select',
        templateOptions: {
          label: $localize `:@@test.form.form-status.label:Status`,
          placeholder: $localize `:@@test.form.form-status.placeholder:Form status`,
          readonly: false,
          description: '',
          options: lookupService.getFormStatus$.pipe(
            map((arr) =>
              arr.map(el => el = {value: el.value, label: el.displayName}))
            ),
          hidden: !true,
        },
      },
      {
        key: 'mockRadio',
        type: 'radio',
        templateOptions: {
          label: $localize `:@@test.form.mock-radio.label:Radio`,
          placeholder: $localize `:@@test.form.mock-radio.placeholder:Mock radio`,
          readonly: false,
          description: '',
          options: lookupService.getMockRadio$.pipe(
            map((arr) =>
              arr.map(el => el = {value: el.value, label: el.displayName}))
            ),
          hidden: !true,
        },
      },
];
 }

  ngOnInit(): void {
  }

  onSubmit() {
    if (this.form.valid) {
      this.save.emit(this.model);
    }
  }
}
