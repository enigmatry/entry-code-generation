// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
/* eslint-disable */
import { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { IFormMock } from 'src/app/api/api-reference';
import { IFieldExpressionDictionary, SelectConfiguration } from '@enigmatry/angular-building-blocks/form';
import { BehaviorSubject } from 'rxjs';

@Component({
  selector: 'app-g-form',
  templateUrl: './form-generated.component.html',
  styleUrls: ['./form-generated.component.scss']
})
export class FormGeneratedComponent implements OnInit {

  @Input() model: IFormMock = {} as IFormMock;
  @Input() set isReadonly(value: boolean) {
    this._isReadonly = value;
    this.fields = this.initializeFields();
  }
  get isReadonly() {
    return this._isReadonly;
  }

  @Input() saveButtonText: string = 'Save';
  @Input() cancelButtonText: string = 'Cancel';
  @Input() formButtonsTemplate: TemplateRef<any> | null | undefined;

  @Input() fieldsHideExpressions: IFieldExpressionDictionary<IFormMock> | undefined = undefined;
  @Input() fieldsDisableExpressions: IFieldExpressionDictionary<IFormMock> | undefined = undefined;

  @Output() save = new EventEmitter<IFormMock>();
  @Output() cancel = new EventEmitter<void>();

            @Input() formStatusOptions: any[] = [{ value: null, displayName: $localize `:@@empty-option.none:None` }, { value: 0, displayName: $localize `:@@enum.enum-mock.first:First` }, { value: 1, displayName: $localize `:@@enum.enum-mock.second:Second` }, { value: 2, displayName: $localize `:@@enum.enum-mock.third:Third` }];
            @Input() formStatusOptionsConfiguration: SelectConfiguration = { valueProperty: 'value', labelProperty: 'displayName' };
            private categoryIdOptions$ = new BehaviorSubject<any[]>([]);
            @Input()
            get categoryIdOptions(): any[] { return this.categoryIdOptions$.value; }
            set categoryIdOptions(value: any[]) { this.categoryIdOptions$.next(value); }
            @Input() categoryIdOptionsConfiguration: SelectConfiguration = { valueProperty: 'id', labelProperty: 'categoryName' };
            private typeIdOptions$ = new BehaviorSubject<any[]>([]);
            @Input()
            get typeIdOptions(): any[] { return this.typeIdOptions$.value; }
            set typeIdOptions(value: any[]) { this.typeIdOptions$.next(value); }
            @Input() typeIdOptionsConfiguration: SelectConfiguration = {};
            @Input() mockRadioOptions: any[] = [{ value: 0, displayName: $localize `:@@enum.enum-mock.first:First` }, { value: 1, displayName: $localize `:@@enum.enum-mock.second:Second` }, { value: 2, displayName: $localize `:@@enum.enum-mock.third:Third` }];
            @Input() mockRadioOptionsConfiguration: SelectConfiguration = { valueProperty: 'value', labelProperty: 'displayName' };

 _isReadonly: boolean;
  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];

  constructor() { }

  ngOnInit(): void {
    this.fields = this.initializeFields();
  }

  onSubmit() {
    if (this.form.valid) {
      this.save.emit(this.model);
    }
  }

  initializeFields(): FormlyFieldConfig[] {
    return [
            { key: 'id' },
        {
        key: 'name',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.name ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.name ? this.fieldsDisableExpressions.name(model) : false)),
        },
        wrappers: ['form-field', 'tooltip'],
        templateOptions: {
        label: $localize `:@@test.form.name.label:Name`,
        placeholder: $localize `:@@test.form.name.placeholder:Some / Name`,
        description: '',
        appearance: 'outline',
        hidden: !true,
        tooltipText: $localize `:@@test.form.name.tooltip:Tooltip text`,
            required: true,
maxLength: 50,
pattern: /[A-Z]/,

        },
            validation: {
            messages: {
required: (err, field) => $localize `:@@CUSTOM_VALIDATION_MESSAGE_TRANSLATION_ID:CUSTOM_VALIDATION_MESSAGE`,
maxlength: (err, field) => $localize `:@@CUSTOM_VALIDATION_MESSAGE_TRANSLATION_ID:CUSTOM_VALIDATION_MESSAGE`
            }
            },
modelOptions: { updateOn: 'blur' },
asyncValidators: { validation: [ 'isEnsured' ] },
        },
        {
        key: 'description',
        type: 'textarea',
        className: '',
        hideExpression: this.fieldsHideExpressions?.description ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.description ? this.fieldsDisableExpressions.description(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.description.label:Some Description`,
        placeholder: $localize `:@@test.form.description.placeholder:Some Description`,
        description: '',
            rows: 2,
            cols: 0,
        hidden: !true,
        },
modelOptions: { updateOn: 'blur' },
asyncValidators: { validation: [ 'validDescription' ] },
        },
        {
        key: 'date',
        type: 'datepicker',
        className: '',
        hideExpression: this.fieldsHideExpressions?.date ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.date ? this.fieldsDisableExpressions.date(model) : true)),
        },
        templateOptions: {
        label: $localize `:@@test.form.date.label:Date`,
        placeholder: $localize `:@@test.form.date.placeholder:Date`,
        description: '',
        hidden: !true,
        },
        },
        {
        key: 'money',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.money ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.money ? this.fieldsDisableExpressions.money(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.money.label:Money`,
        placeholder: $localize `:@@test.form.money.placeholder:Money`,
        description: '',
        hidden: !true,
            type: 'number',
max: 999.99 - 0.1,

        },
        },
        {
        key: 'amount',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.amount ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.amount ? this.fieldsDisableExpressions.amount(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.amount.label:Amount`,
        placeholder: $localize `:@@test.form.amount.placeholder:Amount`,
        description: '',
        hidden: !true,
            required: true,
type: 'number',
min: 0 + 1,
max: 100,

        },
            validation: {
            messages: {
min: (err, field) => $localize `:@@test.form.amount.min:CUSTOM_VALIDATION_MESSAGE`,
max: (err, field) => $localize `:@@test.form.amount.max:CUSTOM_VALIDATION_MESSAGE`
            }
            },
        },
        {
        key: 'email1',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.email1 ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.email1 ? this.fieldsDisableExpressions.email1(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.email1.label:Email 1`,
        placeholder: $localize `:@@test.form.email1.placeholder:Email 1`,
        description: '',
        hidden: !true,
            pattern: /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
maxLength: 50,

        },
            validation: {
            messages: {
pattern: (err, field) => $localize `:@@test.form.email1.pattern:CUSTOM_VALIDATION_MESSAGE`
            }
            },
        },
        {
        key: 'email2',
        type: 'input',
        className: '',
        hideExpression: this.fieldsHideExpressions?.email2 ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.email2 ? this.fieldsDisableExpressions.email2(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.email2.label:Email 2`,
        placeholder: $localize `:@@test.form.email2.placeholder:Email 2`,
        description: '',
        hidden: !true,
            pattern: /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
maxLength: 50,

        },
            validation: {
            messages: {
pattern: (err, field) => $localize `:@@validators.pattern.emailAddress:Invalid email address format`
            }
            },
        },
        {
        key: 'formStatus',
        type: 'select',
        className: '',
        hideExpression: this.fieldsHideExpressions?.formStatus ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.formStatus ? this.fieldsDisableExpressions.formStatus(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.form-status.label:Form status`,
        placeholder: $localize `:@@test.form.form-status.placeholder:Form status`,
        description: '',
            options: this.formStatusOptions,
            valueProp: this.formStatusOptionsConfiguration.valueProperty,
            labelProp: this.formStatusOptionsConfiguration.labelProperty,
        hidden: !true,
        },
        },
        {
        key: 'categoryId',
        type: 'select',
        className: '',
        hideExpression: this.fieldsHideExpressions?.categoryId ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.categoryId ? this.fieldsDisableExpressions.categoryId(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.category-id.label:Category`,
        placeholder: $localize `:@@test.form.category-id.placeholder:Category`,
        description: '',
            options: this.categoryIdOptions$,
            valueProp: this.categoryIdOptionsConfiguration.valueProperty,
            labelProp: this.categoryIdOptionsConfiguration.labelProperty,
        hidden: !true,
        },
        },
        {
        key: 'typeId',
        type: 'select',
        className: '',
        hideExpression: this.fieldsHideExpressions?.typeId ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.typeId ? this.fieldsDisableExpressions.typeId(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.type-id.label:Type`,
        placeholder: $localize `:@@test.form.type-id.placeholder:Type`,
        description: '',
            options: this.typeIdOptions$,
            valueProp: this.typeIdOptionsConfiguration.valueProperty,
            labelProp: this.typeIdOptionsConfiguration.labelProperty,
        hidden: !true,
        },
        },
            { key: 'subTypeId' },
        {
        key: 'mockRadio',
        type: this.isReadonly ? 'readonly-radio' : 'radio',
        className: '',
        hideExpression: this.fieldsHideExpressions?.mockRadio ?? false,
        expressionProperties: {
          'templateOptions.disabled': (model) => (this.isReadonly || (this.fieldsDisableExpressions?.mockRadio ? this.fieldsDisableExpressions.mockRadio(model) : false)),
        },
        templateOptions: {
        label: $localize `:@@test.form.mock-radio.label:Radio`,
        placeholder: $localize `:@@test.form.mock-radio.placeholder:Radio`,
        description: '',
            options: this.mockRadioOptions,
            valueProp: this.mockRadioOptionsConfiguration.valueProperty,
            labelProp: this.mockRadioOptionsConfiguration.labelProperty,
        hidden: !true,
        },
        },
    ];
  }
}