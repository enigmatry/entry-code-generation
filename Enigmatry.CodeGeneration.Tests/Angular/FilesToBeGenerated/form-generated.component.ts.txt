// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------;
/* eslint-disable */
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { IFormMock } from 'src/app/api/api-reference';
import { map } from 'rxjs/operators';
import { FormLookupService } from '../services/form-generated-lookup.service';

@Component({
  selector: 'app-g-form',
  templateUrl: './form-generated.component.html',
  styleUrls: ['./form-generated.component.scss']
})
export class FormGeneratedComponent implements OnInit {

  @Input() model: IFormMock = {};
  @Input() set isReadonly(value: boolean) {
    this._isReadonly = value;
    this.fields = this.initializeFields();
  }
  get isReadonly() {
    return this._isReadonly;
  }

  @Output() save = new EventEmitter<IFormMock>();
  @Output() cancel = new EventEmitter<void>();

  _isReadonly: boolean;
  form = new FormGroup({});
  fields: FormlyFieldConfig[] = [];

  constructor(private lookupService: FormLookupService) {
    this.fields = this.initializeFields();
  }

  ngOnInit(): void {
  }

  onSubmit() {
    if (this.form.valid) {
      this.save.emit(this.model);
    }
  }

  initializeFields(): FormlyFieldConfig[] {
    return [     {
        key: 'name',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.name.label:Name`,
          placeholder: $localize `:@@test.form.name.placeholder:Name`,
          disabled: this.isReadonly || false,
          description: '',
          hidden: !true,
          required: true,
          maxLength: 50,
          pattern: /[A-Z]/,
        },
        validation: {
            messages: {
                required: $localize `:@@CUSTOM_VALIDATION_MESSAGE_TRANSLATION_ID:CUSTOM_VALIDATION_MESSAGE`,
                maxlength: $localize `:@@CUSTOM_VALIDATION_MESSAGE_TRANSLATION_ID:CUSTOM_VALIDATION_MESSAGE`
            }
        },
        modelOptions: { updateOn: 'blur' },
        asyncValidators: { validation: [ 'isEnsured' ] },
      },
     {
        key: 'description',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.description.label:Description`,
          placeholder: $localize `:@@test.form.description.placeholder:Description`,
          disabled: this.isReadonly || false,
          description: '',
          hidden: !true,
        },
        modelOptions: { updateOn: 'blur' },
        asyncValidators: { validation: [ 'validDescription' ] },
      },
     {
        key: 'date',
        type: 'datepicker',
        templateOptions: {
          label: $localize `:@@test.form.date.label:Date`,
          placeholder: $localize `:@@test.form.date.placeholder:Date`,
          disabled: this.isReadonly || false,
          description: '',
          hidden: !true,
        },
      },
     {
        key: 'money',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.money.label:Money`,
          placeholder: $localize `:@@test.form.money.placeholder:Money`,
          disabled: this.isReadonly || false,
          description: '',
          hidden: !true,
          type: 'number',
          max: 999.99 - 1,
        },
      },
     {
        key: 'amount',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.amount.label:Amount`,
          placeholder: $localize `:@@test.form.amount.placeholder:Amount`,
          disabled: this.isReadonly || false,
          description: '',
          hidden: !true,
          required: true,
          type: 'number',
          min: 0 + 1,
          max: 100,
        },
        validation: {
            messages: {
                min: $localize `:@@test.form.amount.min:CUSTOM_VALIDATION_MESSAGE`,
                max: $localize `:@@test.form.amount.max:CUSTOM_VALIDATION_MESSAGE`
            }
        },
      },
     {
        key: 'email1',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.email1.label:Email 1`,
          placeholder: $localize `:@@test.form.email1.placeholder:Email 1`,
          disabled: this.isReadonly || false,
          description: '',
          hidden: !true,
          pattern: /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
        },
        validation: {
            messages: {
                pattern: $localize `:@@test.form.email1.pattern:CUSTOM_VALIDATION_MESSAGE`
            }
        },
      },
     {
        key: 'email2',
        type: 'input',
        templateOptions: {
          label: $localize `:@@test.form.email2.label:Email 2`,
          placeholder: $localize `:@@test.form.email2.placeholder:Email 2`,
          disabled: this.isReadonly || false,
          description: '',
          hidden: !true,
          pattern: /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
        },
        validation: {
            messages: {
                pattern: $localize `:@@validators.pattern.emailAddress:Invalid email address format`
            }
        },
      },
     {
        key: 'formStatus',
        type: 'select',
        templateOptions: {
          label: $localize `:@@test.form.form-status.label:Status`,
          placeholder: $localize `:@@test.form.form-status.placeholder:Form status`,
          disabled: this.isReadonly || false,
          description: '',
          options: this.lookupService.getFormStatus$.pipe(
            map((arr) =>
              arr.map(el => el = {value: el.value, label: el.displayName}))
            ),
          hidden: !true,
        },
      },
      {
        key: 'mockRadio',
        type: this.isReadonly ? 'readonly-radio' : 'radio',
        templateOptions: {
          label: $localize `:@@test.form.mock-radio.label:Radio`,
          placeholder: $localize `:@@test.form.mock-radio.placeholder:Mock radio`,
          disabled: this.isReadonly || false,
          description: '',
          options: this.lookupService.getMockRadio$.pipe(
            map((arr) =>
              arr.map(el => el = {value: el.value, label: el.displayName}))
            ),
          hidden: !true,
        },
      },
];
 }
}
